# Telegraf Configuration

# Global tags can be specified here in key="value" format.
[global_tags]
  rpi_mac = "$TELEGRAF_RPI_MAC"
  rpi_description = "$TELEGRAF_RPI_DESCRIPTION"
  rpi_public_ip = "$TELEGRAF_RPI_PUBLIC_IP"
  rpi_local_ip = "$TELEGRAF_RPI_LOCAL_IP"
  rpi_ssh_username = "$TELEGRAF_RPI_SSH_USERNAME"

# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  debug = true
  quiet = false


###############################################################################
#                            SECRETSTORE PLUGINS                              #
###############################################################################
#[[secretstores.os]]
#   id = "mystore"
#   keyring = "telegraf"

#[[secretstores.docker]]
#  id = "docker_store"
###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
[[outputs.influxdb_v2]]
  urls = ["http://$INFLUXDB_HOST:$INFLUXDB_PORT"]
  
  #token = "@{mystore:influx_token}"
  #token = "@{docker_store:influxdb-token}"
  token = "$INFLUXDB_TOKEN"
  
  organization = "$INFLUXDB_ORG"
  bucket = "$INFLUXDB_BUCKET"

###############################################################################
#                            PROCESSOR PLUGINS                               #
###############################################################################


###############################################################################
#                            AGGREGATOR PLUGINS                               #
###############################################################################


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


# Read metrics about cpu usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
  core_tags = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]


# Read metrics about disk IO by device
#[[inputs.diskio]]


# Plugin to collect various Linux kernel statistics.
# This plugin ONLY supports Linux
[[inputs.kernel]]


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Get the number of processes and group them by status
# This plugin ONLY supports non-Windows
[[inputs.processes]]


# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration


# Read metrics about system load & uptime
#[[inputs.system]]
  # no configuration


###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################


[[inputs.netflow]]
  service_address = "udp://:2055"
  protocol = "ipfix"

[[processors.converter]]
  [processors.converter.fields]
    tag = ["protocol", "direction"]

#[[inputs.exec]]
#  commands = ["/usr/local/bin/process_monitor.sh"]
#  data_format = "influx"
#  timeout = "5s"
#  interval = "10s"

[[inputs.exec]]
  commands = ["/usr/local/bin/arp_check_mac_ip.sh"]
  data_format = "influx"
  timeout = "5s"
  interval = "15s"

#[[inputs.tail]]
#  files = ["/var/log/suricata/eve.json"]
#  data_format = "json"
[[inputs.tail]]
  name_override = "suricata_alerts"
  files = ["/var/log/suricata/fast.log"]
  # Only read new lines
  from_beginning = false
  watch_method = "inotify"

  # Parsing options (each log entry as a raw string)
  data_format = "grok"
  grok_patterns = ["%{TIME:time}  \\[\\*\\*\\] \\[%{NUMBER:gid}:%{NUMBER:sid}:%{NUMBER:rev}\\] %{DATA:alert} \\[\\*\\*\\] \\[Classification: %{DATA:classification}\\] \\[Priority: %{NUMBER:priority}\\] {%{WORD:protocol}} %{IPV4:src}:%{NUMBER:src_port} -> %{IPV4:dst}:%{NUMBER:dst_port}"]


#[[processors.regex]]
#  namepass = ["tail"]
#  [[processors.regex.fields]]
#    key = "date"
#    pattern = "(?P<month>\d{2})/(?P<day>\d{2})/(?P<year>\d{4})"
#    replacement = "${day}/${month}/${year}"
